[{"path":"https://cetialphafive.github.io/MLbalance/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack T. Rametta. Author, maintainer. Sam Fuller. Author.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rametta JT, Fuller S (2024). MLbalance: Balance Permutation Test. R package version 0.1, https://github.com/CetiAlphaFive/MLbalance.","code":"@Manual{,   title = {MLbalance: Balance Permutation Test},   author = {Jack T. Rametta and Sam Fuller},   year = {2024},   note = {R package version 0.1},   url = {https://github.com/CetiAlphaFive/MLbalance}, }"},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"mlbalance-","dir":"","previous_headings":"","what":"Balance Permutation Test","title":"Balance Permutation Test","text":"MLbalance implements novel machine learning balance test, balance permutation test, experiments binary, multiarm, continuous treatments. purpose test detect failures random assignment, data fabrication, imbalance across treatment arms. detail, see Rametta Fuller (2024). package development, recommendations comments welcome issues section.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Balance Permutation Test","text":"Stable version available Github : can install development version MLbalance GitHub :","code":"# install.packages(\"pak\") pak::pak(\"MLCause/MLbalance\") # install.packages(\"pak\") pak::pak(\"CetiAlphaFive/MLbalance\")"},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"binary-treatment-example","dir":"","previous_headings":"","what":"Binary Treatment Example","title":"Balance Permutation Test","text":"basic example demonstrating balance permutation test simulated binary treatment DGP multidimensional contamation treatment assignment.","code":"# install.packages(\"randomizr\") library(MLbalance) # set.seed(1995) # # Simple simulation  n <- 1000 p <- 20 X <- matrix(rnorm(n*p,0,1),n,p) w_real <- rbinom(n, 1, ifelse(.021 + abs(.4*X[,4] - .5*X[,8]) < 1, .021 + abs(.4*X[,4] - .5*X[,8]), 1)) # install.packages(\"randomizr\") w_sim <- randomizr::complete_ra(N = n,m = sum(w_real)) e <- rnorm(n,0,1) y <- 2*w_real*X[,4] + 3*X[,2] -2*X[,8] + e df <- data.frame(y,w_real,w_sim,X) # r.check <- random_check(W_real = df$w_real, #real treatment assignment vector                          W_sim  = df$w_sim, #simulated vector, comment out this argument to use permutated real assignment vector instead                          X      = subset(df,select = -c(y,w_real,w_sim)) #matrix of pretreatment covariates (or any covariates that SHOULD NOT be related to the assignment process/mechanism              ); r.check$plot #> Simulated Assignment Vector Provided, Null Distribution Generated Using Simulated Treatment Assignment. #>  #>  #> Simple Count Table(s) #>  #> W_real #>   0   1  #> 520 480  #> W_sim #>   0   1  #> 520 480  #>  #>  #> Warning: Extreme Propensity scores detected (greater than .9 or less than .1). #>                                       Examine $treat.props for more detail. # to see variables important for predicting assignment, check r.check$imp.predictors"},{"path":"https://cetialphafive.github.io/MLbalance/reference/MLbalance-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MLbalance: Balance Permutation Test — MLbalance-package","title":"MLbalance: Balance Permutation Test — MLbalance-package","text":"package implements novel machine learning balance test, balance permutation test, experimental data. purpose test detect unintentional failures random assignment, data fabrication, simple covariate imbalance. implemenation employs honest, boosted random forests native parallel processing, hyperparameter tuning, ability handle missingness pre-treatment covariates.","code":""},{"path":[]},{"path":"https://cetialphafive.github.io/MLbalance/reference/MLbalance-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MLbalance: Balance Permutation Test — MLbalance-package","text":"Maintainer: Jack T. Rametta jtrametta@ucdavis.edu Authors: Sam Fuller sjfuller@ucdavis.edu","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance Permutation Test — random_check","title":"Balance Permutation Test — random_check","text":"main balance permutation test function. First, function attempts model treatment assignment (W_real) function pre-treatment covariates (X). using honest, boosted random forest (see Ghosal Hooker 2018) built-hyperparameter tuning. model used generate real treatment propensity scores. , build second boosted random forest model using pre-treatment covariates tuning parameter settings either simulated, randomly permuted, treatment assignment outcome variable. function proceeds output real null treatment propensity scores well diagnostics plot comparing distributions. purpose exercise compare real treatment propensity distribution null distribution treatment assignment correctly orthogonal pre-treatment covariates. interpret results, advisable notice extreme, deterministic treatment propensity scores near zero one, divergences design expectations. general, randomization succeeded two distributions closely overlap similar means variances. results unclear, advisable estimate average treatment effects via method accounts propensity treatment (e.g., augmented inverse propensity weighting, overlap weighting, etc.).","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance Permutation Test — random_check","text":"","code":"random_check(   W_real,   W_sim = NULL,   X,   R.seed = 1995,   grf.seed = 1995,   breaks = 15,   facet = FALSE )"},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance Permutation Test — random_check","text":"W_real Real treatment assignment vector. W_sim Simulated treatment assignment vector. provided, permuted W_real used. X Pre-treatment covariate matrix data frame. R.seed Random seed used set.seed (replicability). grf.seed Random seed used grf's seed (replicability). breaks number breaks output histogram. Default 15. facet facet treatment assignment. Default FALSE.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance Permutation Test — random_check","text":"","code":"n <- 1000 #sample size p <- 20 #number of pre-treatment covariates X <- matrix(rnorm(n*p,0,1),n,p) #simulating pre-treatment covariates w_real <- rbinom(n, 1, ifelse(.021 + abs(.4*X[,4] - .5*X[,8]) < 1,                  .021 + abs(.4*X[,4] - .5*X[,8]), 1)) #simulating contaminated assignment df <- data.frame(w_real,X) r.check <- random_check(W_real = df$w_real, #real treatment assignment                         W_sim  = df$w_sim, #simulated treatment assignment, unhash for permuted version                         X = subset(df,select = -w_real)); r.check$plot #> No Simulated Assignment Vector Provided, Null Distribution Generated Using Permuted Treatment Assignment. #>  #>"},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance Function — vip","title":"Variable Importance Function — vip","text":"convenience function takes trained grf model object returns data frame variable importance scores using grf's simple variable importance metric.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance Function — vip","text":"","code":"vip(model)"},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance Function — vip","text":"model Trained GRF Model Object","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance Function — vip","text":"","code":"x <- data.frame(X1 = rnorm(1000)) y <- rnorm(1000) model <- grf::regression_forest(X = x,Y = y) vip(model) #>   varname vip #> 1      X1   1"}]
